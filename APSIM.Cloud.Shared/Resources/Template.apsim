<folder version="36" creator="Apsim 7.7-r3715" name="Simulations">
  <simulation name="Base">
    <clock name="Clock" />
    <metfile name="Met">
      <filename name="filename" input="yes">%apsim%\Examples\MetFiles\dalby.met</filename>
    </metfile>
    <summaryfile name="SummaryFile" />
    <area name="Paddock">
      <manager2 name="Management">
        <ui>
          <DateReportWasGenerated type="text" description="The date the report was generated :">2015-04-17</DateReportWasGenerated>
          <ProbeDepths type="text" description="The depth layer structure of probes :" />
          <CropName type="text" description="Crop to be sown">Wheat</CropName>
          <NUnlimited type="yesno" description="N Unlimited?">no</NUnlimited>
          <NUnlimitedFromToday type="yesno" description="N unlimited from today?">no</NUnlimitedFromToday>
          <WriteDepthFile type="yesno" description="Write a depth.out file?">no</WriteDepthFile>
          <DryNext10Days type="yesno" description="Dry for next 10 days?">no</DryNext10Days>
          <FertiliserCost type="text" description="Cost of N fertiliser ($/ha)">1.2</FertiliserCost>
          <FertiliserApplicationCost type="text" description="Cost of N application ($/ha) : ">15</FertiliserApplicationCost>
          <WaterCost type="text" description="Cost of water ($/Ml) : ">0</WaterCost>
          <APH1Price type="text" description="APH1 Price ($/t) : ">240</APH1Price>
          <APH2Price type="text" description="APH2 Price ($/t) : ">200</APH2Price>
          <H2Price type="text" description="H2 Price ($/t) : ">180</H2Price>
          <APWPrice type="text" description="APW Price ($/t) : ">160</APWPrice>
          <ASWPrice type="text" description="ASW Price ($/t) : ">140</ASWPrice>
          <APH1Protein type="text" description="APH1 Protein (%):">14</APH1Protein>
          <APH2Protein type="text" description="APH2 Protein (%):">13</APH2Protein>
          <H2Protein type="text" description="H2 Protein (%):">11.5</H2Protein>
          <APWProtein type="text" description="APW Protein (%):">10.5</APWProtein>
          <ASWProtein type="text" description="ASW Protein (%):">0</ASWProtein>
        </ui>
        <text>
          using System;
          using System.IO;
          using System.Xml;
          using ModelFramework;
          using CSGeneral;
          using ApsimFile;

          public class Script
          {
          private double AvProbeTempValue = 0;
          private double CumulativeProbeRainSinceStartSeasonValue = 0;
          private bool ProbeRainHasStarted = false;
          private int NumConsecWaterLoggedDays = 0;
          private Soil Soil;
          private double[] ProbeThicknesses = null;
          private double organic_C_start = 0;
          private double dsli;

          [Link] Paddock Paddock;
          [Link] Fertiliser Fertiliser;
          [Link] MetFile Met;

          [Input] string title;
          [Input] DateTime Today;
          [Input(IsOptional=true)] double node_no;        // Sorghum doesn't have a node_no hence optional.
          [Input(IsOptional=true)] double zadok_stage;    // Optional because canola doesn't have this variable.
          [Input] int DaysAfterSowing;
          [Input] double runoff;
          [Input] double drain;
          [Input] double[] dlayer;
          [Input] double[] sw_dep;
          [Input] double[] sw;
          [Input] double[] ll_dep;
          [Input] double[] ll15_dep;
          [Input] double[] air_dry;
          [Input(IsOptional=true)] double[] xf;           // Sorghum doesn't have this as an output hence optional
          [Input] double[] dul;
          [Input] double[] sat;
          [Input] double[] dul_dep;
          [Input] double[] sat_dep;
          [Input] double[] dlt_n_min_tot;
          [Input] double[] no3;
          [Input] double[] nh4;
          [Input] double[] biom_c;
          [Input] double[] hum_c;
          [Input(IsOptional=true)] double[] no3_uptake;    // Sorghum doesn't have this
          [Input] double maxt;
          [Input] double mint;
          [Input(IsOptional=true)] double origmaxt = -999; // Short term met file doesn't have this.
          [Input(IsOptional=true)] double origmint = -999; // Short term met file doesn't have this.
          [Input] double rain;
          [Input] double biomass_n;
          [Input] double RootGreenN;
          [Input] double fertiliser;
          [Input] double irrig_tot;
          [Input(IsOptional=true)] double unpatched_rain;
          [Input(IsOptional=true)] double Yield;
          [Input(IsOptional=true)] double grain_protein;
          [Input(IsOptional=true)] double Biomass;
          [Input(IsOptional=true)] double root_depth;
          [Input(IsOptional=true)] double podGreenWt;
          [Input] double[] ave_soil_temp = null;
          [Input(IsOptional=true)] double ttafterstart_grain_fill = 0;   // peanut variable
          [Input(IsOptional=true)] double start_grain_fillTTTarget = 0;  // peanut variable
          [Input(IsOptional=true)] double cover_tot = 0;                 // peanut variable
          [Input(IsOptional=true)] double EP = 0;                        // peanut variable
          [Input(IsOptional=true)] double Stage = 0;                     // peanut variable
          [Input] double[] WeeklyEP;                                     // tracker variable


          [Param(IsOptional=true)] DateTime DateReportWasGenerated;
          [Param] string CropName;
          [Param] bool NUnlimited;
          [Param] bool NUnlimitedFromToday;
          [Param] bool WriteDepthFile;
          [Param] bool DryNext10Days;

          [Param] double FertiliserCost;
          [Param] double FertiliserApplicationCost;
          [Param] double WaterCost;
          [Param] double APH1Price;
          [Param] double APH2Price;
          [Param] double H2Price;
          [Param] double APWPrice;
          [Param] double ASWPrice;
          [Param] double APH1Protein;
          [Param] double APH2Protein;
          [Param] double H2Protein;
          [Param] double APWProtein;
          [Param] double ASWProtein;

          [Output][Param(IsOptional=true)] double[] ProbeDepths = null;
          [Output] double AvTemp;
          [Output] string AvProbeTemp = "*";
          [Output] double CumulativeRainSinceStartSeason = 0;
          [Output] string CumulativeProbeRainSinceStartSeason = "*";
          [Output] string ProbeMinT = "*";
          [Output] string ProbeMaxT = "*";
          [Output] string AustState;
          [Output] double Z;
          [Output] int Zadok11Das;
          [Output] int Zadok12Das;
          [Output] int Zadok13Das;
          [Output] int Zadok14Das;
          [Output] int Zadok15Das;
          [Output] int Zadok16Das;
          [Output] int Zadok30Das;
          [Output] int Zadok31Das;
          [Output] int Zadok32Das;
          [Output] int Zadok37Das;
          [Output] int Zadok39Das;
          [Output] int Zadok45Das;
          [Output] int Zadok55Das;
          [Output] int Zadok65Das;
          [Output] int Zadok75Das;
          [Output] int Stage2Das;
          [Output] int Stage3Das;
          [Output] int Stage4Das;
          [Output] int Stage5Das;
          [Output] int Stage6Das;
          [Output] int Stage7Das;
          [Output] int Stage8Das;
          [Output] int Stage9Das;
          [Output] int MildHeatShockCount = 0;
          [Output] int ModerateHeatShockCount = 0;
          [Output] int SevereHeatShockCount = 0;
          [Output] int MildFrostCount = 0;
          [Output] int ModerateFrostCount = 0;
          [Output] int SevereFrostCount = 0;
          [Output] double[] VirtualProbeSW = null;
          [Output] double Zero { get { return 0.0; } }
          [Output] DateTime SowDate;
          [Output] double BankBalance = 0;
          [Output] double aflo_perc;     // Peanut aflatoxin risk (%)
          [Output] double watersupply;
          [Output] double fasw = 0;
          [Output] double TAW;
          [Output] double FCW;
          [Output] double RAW;
          [Output] double NextIrrig;
          [Output] double WetYield
          {
          get
          {
          double MoistureContent = 12;
          if (CropName == "Canola")
          MoistureContent = 8;
          return Yield / (1 - MoistureContent / 100.0) / 1000;
          }
          }
          [Output] double PeanutPodYield
          {
          get
          {
          return podGreenWt * 10.0 + Yield; // Calculate peanut pod yield at 12% moisture
          }
          }
          [Output] double PercentCover
          {
          get
          {
          return cover_tot * 100.0;
          }
          }
          [Output] double HayBiomass
          {
          get
          {
          // Calculate hay biomass and convert kg / ha to t/ha - assume 13 % moisture
          double CropBiomass = (Biomass / (1.0 - 13 / 100.0) / 1000);
          double HayBiomassPercent;
          if (Biomass &gt;= 2000 &amp;&amp; Biomass &lt;= 12000)
            HayBiomassPercent = 70.0 + (Biomass - 2000) / (12000 - 2000) * 5;
         else if (Biomass &gt; 12000)
            HayBiomassPercent = 75 + (Biomass - 12000) / (25000 - 12000) * 5;
         else
            HayBiomassPercent = 70;
            
         return (HayBiomassPercent / 100.0) * CropBiomass;
      }
   }
   [Output] double PAWC
   {
      get
      {
         double[] PAWC = Soil.CalcPAWC(dlayer, ll_dep, dul_dep, xf);
         return MathUtility.Sum(PAWC);          
      }
   }
   [Output] double AvailableWater
   {
      get
      {
         double[] PAW = Soil.CalcPAWC(dlayer, ll_dep, sw_dep, xf);
         if (PAW == null)
            return 0;      // Will be null for sorghum model
         else
            return MathUtility.Sum(PAW);          
      }
   }
   [Output] double Mineralisation
   {
      get
      {
         // Don't return negative mineralisations - negative numbers are returned
         // in the NitrogenTieUp property below.
         double TotalMineralisation = MathUtility.Sum(dlt_n_min_tot);
         if (TotalMineralisation &gt;= 0)
            return TotalMineralisation;
         else
            return 0;
      }
   }   
   [Output] double Nitrogen
   {
      get
      {
         return MathUtility.Sum(no3) + MathUtility.Sum(nh4);
      }
   }
   [Output] double NitrogenTieUp
   {
      get
      {
         // Don't return negative mineralisations - negative numbers are returned
         // in the NitrogenTieUp property below.
         double TotalMineralisation = MathUtility.Sum(dlt_n_min_tot);
         if (TotalMineralisation &gt;= 0)
            return 0;
         else
            return -TotalMineralisation;  // return a +ve number
      }
   }   
   [Output] double AmountWaterAboveCLL
   {
      get
      {
         double amount = SwToday - CLLToday;
         if (amount &lt; 0)
            amount = 0;
         
         return amount;
      }
   }
 
   [Output] double SwToday
   {
      get
      {
         double[] cumThickness = Soil.ToCumThickness(dlayer); // mm
         double[] cumSWDEP = Soil.ToCumThickness(sw_dep); // mm
         bool didInterp;
         return MathUtility.LinearInterpReal(root_depth, cumThickness, cumSWDEP, out didInterp);
      }
   } 
   
   [Output] double CLLToday
   {
      get
      {
         if (ll_dep.Length &gt; 0) // Sorghum gives a zero length ll_dep sometimes.
         {
            double[] cumThickness = Soil.ToCumThickness(dlayer); // mm
            double[] cumCLL = Soil.ToCumThickness(ll_dep); // mm
            bool didInterp;
            return MathUtility.LinearInterpReal(root_depth, cumThickness, cumCLL, out didInterp);
         }
         return 0;
      }
   }
   
   [Output] double DULToday
   {
      get
      {
         double[] cumThickness = Soil.ToCumThickness(dlayer); // mm
         double[] cumDUL = Soil.ToCumThickness(dul_dep); // mm
         bool didInterp;
         return MathUtility.LinearInterpReal(root_depth, cumThickness, cumDUL, out didInterp);
      }
   }
   
   [Output] double CritSWToday
   {
      get
      {
         return CLLToday + (DULToday - CLLToday) * 0.30;
      }
   }
 
   [Output] double AmountWaterLeft
   {
      get
      {
         return SwToday - CritSWToday;
      }
   }
     
   [Output] double NO3AvailToRoots
   {
      get
      {
         double[] cumThickness = Soil.ToCumThickness(dlayer); // mm
         double[] cumN = Soil.ToCumThickness(no3); // kg/ha
         bool didInterp;
         return MathUtility.LinearInterpReal(root_depth, cumThickness, cumN, out didInterp);
      }
   }

   [Output] double NInPlant
   {
      get
      {
         return (biomass_n * 10) + (RootGreenN * 10);    // unit conversion g/m2 to kg/ha
      }
   }
   
   [Output] double NUptakeKgHa
   {
      get
      {
         return MathUtility.Sum(no3_uptake) * -1; // convert to positive number
      }
   }   
       
   [Output] int MildHeatShockAdditiveCount
   {
      get
      {
         return MildHeatShockCount + ModerateHeatShockCount + SevereHeatShockCount;
      }
   } 
   
   [Output] int ModerateHeatShockAdditiveCount
   {
      get
      {
         return ModerateHeatShockCount + SevereHeatShockCount;
      }
   }    
   
   [Output] int MildFrostAdditiveCount
   {
      get
      {
         return MildFrostCount + ModerateFrostCount + SevereFrostCount;
      }
   } 
   
   [Output] int ModerateFrostAdditiveCount
   {
      get
      {
         return ModerateFrostCount + SevereFrostCount;
      }
   }     

   [Output] double ChangeInOrganicC
   {
      get
      {
         return MathUtility.Sum(biom_c) + MathUtility.Sum(hum_c) - organic_C_start;
      }
   }     
   
   // ------------------------------------------------------------------------------
   // The following event handler will be called once at the START OF THE SIMULATION
   // ------------------------------------------------------------------------------
   [EventHandler] public void OnInitialised()
   {
      organic_C_start = MathUtility.Sum(biom_c) + MathUtility.Sum(hum_c);

      if (origmint != -999)
         Console.WriteLine("Using original minimum temperatures for frost/heat calculations");

      if (origmaxt != -999)
         Console.WriteLine("Using original maximum temperatures for frost/heat calculations");
   }
      
   // ------------------------------------------------------------------------------
   // The following event handler will be called each day at the very BEGINNING of the day
   // before the input module has finished reading in weather data.
   // ------------------------------------------------------------------------------
   [EventHandler] public void OnPreNewMet(NewMetType Data)
   {
      DateTime DateReportGeneratedPlus10Days = DateReportWasGenerated.AddDays(10);
      if (DryNext10Days &amp;&amp; Today &gt; DateReportWasGenerated &amp;&amp; Today &lt;= DateReportGeneratedPlus10Days)
      {
         Met.Rain = 0.0F;
      }
   }
   
   // ------------------------------------------------------------------------------
   // The following event handler will be called each day at the BEGINNING of the day
   // ------------------------------------------------------------------------------
   [EventHandler] public void OnPrepare()
   {
      if (ProbeDepths != null &amp;&amp; ProbeDepths.Length &gt; 0)
      {
         if (ProbeThicknesses == null)
         {
            // read in soil node.
            if (Soil == null)
            {
               XmlDocument Doc = new XmlDocument();
               Doc.Load("soil.xml");
               Soil = Soil.Create(Doc.DocumentElement.OuterXml);
            }
         
            // **********************
            // Soil Probe Crop Report
            // **********************
            
            if (VirtualProbeSW == null)
            {
               VirtualProbeSW = new double[ProbeDepths.Length];
               ProbeThicknesses = new double[ProbeDepths.Length + 1];
               ProbeThicknesses[0] = ProbeDepths[0] / 2 * 10;
               for (int i = 0; i &lt; ProbeDepths.Length; i++)
               {
                  if (i == 0)
                     ProbeThicknesses[i + 1] = ProbeDepths[i] * 10;
                  else
                     ProbeThicknesses[i + 1] = (ProbeDepths[i] - ProbeDepths[i - 1]) * 10;
               }
            }
         }         
      }

      fasw = 0.0;
      if (ll_dep != null &amp;&amp; ll_dep.Length == sw_dep.Length)
      {
         double paw = MathUtility.Sum(MathUtility.Subtract(sw_dep, ll_dep));
         double pawc = MathUtility.Sum(MathUtility.Subtract(dul_dep, ll_dep));
         fasw = paw / pawc;
         fasw = Math.Abs(MathUtility.Bound(fasw, 0, 1));
      }
      
      if (DaysAfterSowing == 1)
         SowDate = Today.AddDays(-1);
      
      // Calculate a cumulative unpatched rainfall from start of growing season.
      object PatchRainObj;
      if (Paddock.GetObject("patch_rain", out PatchRainObj) &amp;&amp; PatchRainObj.ToString() != "*")
      {
         double PatchRain = Convert.ToDouble(PatchRainObj.ToString());

         ProbeRainHasStarted = true;
         CumulativeProbeRainSinceStartSeasonValue += PatchRain;
         CumulativeProbeRainSinceStartSeason = CumulativeProbeRainSinceStartSeasonValue.ToString("f3");
      }
      else
         CumulativeProbeRainSinceStartSeason = "*";

      //if (ProbeRainHasStarted)
      CumulativeRainSinceStartSeason += unpatched_rain;
         

      // Calculate average temp and average probe temp
      AvTemp = (maxt + mint) / 2.0;
      
      object ProbeMaxTObj = null;
      object ProbeMinTObj = null;
      bool probeTempsFound = Paddock.GetObject("probe_maxt", out ProbeMaxTObj) &amp;&amp;
         Paddock.GetObject("probe_mint", out ProbeMinTObj);
      if (!probeTempsFound)
      {
         probeTempsFound = Paddock.GetObject("patch_maxt", out ProbeMaxTObj) &amp;&amp;
            Paddock.GetObject("patch_mint", out ProbeMinTObj);
      }
         
      if (probeTempsFound &amp;&amp;
         ProbeMaxTObj.ToString() != "*" &amp;&amp; ProbeMinTObj.ToString() != "*")
      {
         ProbeMaxT = ProbeMaxTObj.ToString();
         ProbeMinT = ProbeMinTObj.ToString();
         double probeMaxT = Convert.ToDouble(ProbeMaxT);
         double probeMinT = Convert.ToDouble(ProbeMinT);
         AvProbeTempValue = (probeMaxT + probeMinT) / 2.0;
         AvProbeTemp = AvProbeTempValue.ToString("f3");
      }
      else
      {
         ProbeMaxT = "*";
         ProbeMinT = "*";
         AvProbeTemp = "*";
      }
      
      // N unlimited
      if (NUnlimited &amp;&amp; NO3AvailToRoots &lt; 100 &amp;&amp; DaysAfterSowing &gt; 0)
         Fertiliser.Apply(100.0f, 20.0f, "NO3_N");
      
      // N unlimited from today
      if (NUnlimitedFromToday &amp;&amp; NO3AvailToRoots &lt; 100 &amp;&amp; DaysAfterSowing &gt; 0 &amp;&amp;
         Today &gt; DateReportWasGenerated)
         Fertiliser.Apply(100.0f, 20.0f, "NO3_N");
      
      // Peanut irrigation deficit.
      double Depletion_fraction;
      double AWwateruse;
      double critfasw = 0.50;
      if (DaysAfterSowing &lt; 7)
      {
         AWwateruse = EP;
         Depletion_fraction = 0.5;
      }
      else
      {
         AWwateruse = WeeklyEP[0];
         Depletion_fraction = critfasw + (0.04 * (5 - WeeklyEP[0]));
      }

      if  (Depletion_fraction &lt;= 0.1)
         Depletion_fraction = 0.1;

      else if (Depletion_fraction &gt;= 0.8)
         Depletion_fraction = 0.8;
  
      // water depletion and irrigaiton requirement calculations
      TAW = 0;
      double TAW1 = ((dul_dep[0] - ll15_dep[0]) + (dul_dep[1] - ll15_dep[1]) + (dul_dep[2] - ll15_dep[2])) / (dlayer[0] + dlayer[1] + dlayer[2]) * 500;
      FCW = (((dul_dep[0] - sw_dep[0]) + (dul_dep[1] - sw_dep[1]) + (dul_dep[2] - sw_dep[2])) / (dlayer[0] + dlayer[1] + dlayer[2]) * 500) - drain;
      RAW = TAW1 * Depletion_fraction;
      double Refillpoint = TAW1 - RAW;
      double fesw = ((sw_dep[0] - ll15_dep[0]) + (sw_dep[1] - ll15_dep[1]) + (sw_dep[2] - ll15_dep[2])) / ((dul_dep[0] - ll15_dep[0]) + (dul_dep[1] - ll15_dep[1]) + (dul_dep[2] - ll15_dep[2]));
      double deficit = (dul_dep[0] - sw_dep[0]) + (dul_dep[1] - sw_dep[1]) + (dul_dep[2] - sw_dep[2]);
    
      if (DaysAfterSowing &gt; 0 &amp;&amp; Stage &lt;= 8 &amp;&amp; fesw &lt;= 0.5 &amp;&amp; dsli &gt; 5)
      {
         watersupply = (TAW1 * (1 - fesw)) / 0.8;
         dsli = 0;
      }
      else 
         watersupply = 0;
      
      
      NextIrrig = 0;
      if (DaysAfterSowing &gt; 0 &amp;&amp; AWwateruse &gt; 0 &amp;&amp; FCW &lt; TAW)
         NextIrrig = RAW / AWwateruse;
      else if (DaysAfterSowing &gt; 0 &amp;&amp; AWwateruse &gt; 0 &amp;&amp; FCW &gt; TAW)
         NextIrrig = (RAW - FCW) / AWwateruse;
      
      if (NextIrrig &gt; 15)
         NextIrrig = 15;
      
      dsli = dsli + 1;
   }
   
   
   // ------------------------------------------------------------------------------
   // The following event handler will be called each day at the END of the day
   // ------------------------------------------------------------------------------
   [EventHandler] public void OnPost()
   {
      
      // Improved Zadok_stage
      if (zadok_stage &lt; 30)
      {
         Z = node_no + 9;
         if (CropName == "Barley")
            Z++;
         if (Z &gt; 16)
            Z = 16;
      }
      else
         Z = zadok_stage;

      if (DaysAfterSowing == 1)
      {
         Zadok11Das = 0;
         Zadok12Das = 0;
         Zadok13Das = 0;
         Zadok14Das = 0;
         Zadok15Das = 0;
         Zadok16Das = 0;
         Zadok30Das = 0;
         Zadok31Das = 0;
         Zadok32Das = 0;
         Zadok37Das = 0;
         Zadok39Das = 0;
         Zadok45Das = 0;
         Zadok55Das = 0;
         Zadok65Das = 0;
         Zadok75Das = 0;
      }
      if (Z &gt;= 11 &amp;&amp; Zadok11Das == 0) 
         Zadok11Das = DaysAfterSowing;
      else if(Z &gt;= 12 &amp;&amp; Zadok12Das == 0) 
         Zadok12Das = DaysAfterSowing;
      else if(Z &gt;= 13 &amp;&amp; Zadok13Das == 0) 
         Zadok13Das = DaysAfterSowing;
      else if(Z &gt;= 14 &amp;&amp; Zadok14Das == 0) 
         Zadok14Das = DaysAfterSowing;
      else if(Z &gt;= 15 &amp;&amp; Zadok15Das == 0) 
         Zadok15Das = DaysAfterSowing;
      else if(Z &gt;= 16 &amp;&amp; Zadok16Das == 0) 
         Zadok16Das = DaysAfterSowing;
      else if(Z &gt;= 30 &amp;&amp; Zadok30Das == 0) 
         Zadok30Das = DaysAfterSowing;
      else if(Z &gt;= 31 &amp;&amp; Zadok31Das == 0) 
         Zadok31Das = DaysAfterSowing;
      else if(Z &gt;= 32 &amp;&amp; Zadok32Das == 0) 
         Zadok32Das = DaysAfterSowing;
      else if(Z &gt;= 37 &amp;&amp; Zadok37Das == 0) 
         Zadok37Das = DaysAfterSowing;
      else if(Z &gt;= 39 &amp;&amp; Zadok39Das == 0) 
         Zadok39Das = DaysAfterSowing;
      else if(Z &gt;= 45 &amp;&amp; Zadok45Das == 0) 
         Zadok45Das = DaysAfterSowing;
      else if(Z &gt;= 55 &amp;&amp; Zadok55Das == 0) 
         Zadok55Das = DaysAfterSowing;
      else if(Z &gt;= 65 &amp;&amp; Zadok65Das == 0) 
         Zadok65Das = DaysAfterSowing;
      else if(Z &gt;= 75 &amp;&amp; Zadok75Das == 0) 
         Zadok75Das = DaysAfterSowing;
         
      CalculateStageVariables();

      // Count waterlogging events in crop
      //double swTop2Layers = sw_dep[0] + sw_dep[1];
      //double satTop2Layers = sat_dep[0] + sat_dep[1];
      // Is soil water in top layer greather than DUL?
      if (sw_dep[0] &gt;= dul_dep[0] &amp;&amp; 
         DaysAfterSowing &gt; 0 &amp;&amp; 
         Today.DayOfYear &gt;= DateReportWasGenerated.DayOfYear)
         NumConsecWaterLoggedDays++;
      else
      {
         // At the end of the water logging event, publish the appropriate events so that tracker can count them.
         if (NumConsecWaterLoggedDays &gt;= 1)
            Paddock.Publish("WaterLog1OrMore");
         if (NumConsecWaterLoggedDays &gt;= 2)
            Paddock.Publish("WaterLog2OrMore");
         if (NumConsecWaterLoggedDays &gt;= 3)
            Paddock.Publish("WaterLog3OrMore");
         if (NumConsecWaterLoggedDays &gt;= 4)
            Paddock.Publish("WaterLog4OrMore");
         if (NumConsecWaterLoggedDays &gt;= 5)
            Paddock.Publish("WaterLog5OrMore");
         if (NumConsecWaterLoggedDays &gt;= 6)
            Paddock.Publish("WaterLog6OrMore");
         NumConsecWaterLoggedDays = 0;
      }
      
      // Update our bank balance.
      GrossMargin();
      
      // Auto harvest crop
      string stageName;
      string plantStatus;
      Paddock.Get(CropName + ".StageName", out stageName);
      Paddock.Get(CropName + ".plant_status", out plantStatus);
      if (stageName == "harvest_ripe" || plantStatus == "dead")
      {
         HarvestType harvest = new HarvestType();
         Paddock.Publish(CropName + ".harvest", harvest);
         Paddock.Publish(CropName + ".end_crop"); 
      }
      
      // Frost risk and heat shock counts
      if (DaysAfterSowing == 1)
      {
         MildHeatShockCount = 0;
         ModerateHeatShockCount = 0;
         SevereHeatShockCount = 0;
         MildFrostCount = 0;
         ModerateFrostCount = 0;
         SevereFrostCount = 0;
      }
      else
      {
         double tempmin = mint;
         if (origmint != -999)
            tempmin = origmint;
         
         double tempmax = maxt;
         if (origmaxt != -999)
            tempmax = origmaxt;
         
         if (Z &gt;= 60 &amp;&amp; Z &lt; 75.99)
         {
            if (tempmin &gt;= 0 &amp;&amp; tempmin &lt; 2)
               MildFrostCount++;
            else if (tempmin &gt;= -2 &amp;&amp; tempmin &lt; 0)
               ModerateFrostCount++;
            else if (tempmin &lt; -2)
               SevereFrostCount++;
         }
         if (Z &gt;= 70 &amp;&amp; Z &lt; 79.99)
         {
            if (tempmax &gt;= 32 &amp;&amp; tempmax &lt; 34)
               MildHeatShockCount++;
            else if (tempmax &gt;= 34 &amp;&amp; tempmax &lt; 36)
               ModerateHeatShockCount++;
            else if (tempmax &gt;= 36)
               SevereHeatShockCount++;
         }
      }
      
      // Send out a CurrentDay event if today is the DateReportWasGenerated.
      // This is used by tracker.
      if (Today.DayOfYear &gt;= DateReportWasGenerated.DayOfYear)
         Paddock.Publish("CurrentDay");
      
      // Send out a Next10Days event so that 'Daily' can pick it up.
      DateTime DateReportGeneratedPlus10Days = DateReportWasGenerated.AddDays(10);
      if (DryNext10Days &amp;&amp; Today &gt; DateReportWasGenerated &amp;&amp; Today &lt;= DateReportGeneratedPlus10Days)
      {
         Paddock.Publish("Next10Days");
      }
      
      // Aflatoxin risk.
      if (CropName.ToLower() == "peanut" &amp;&amp; DaysAfterSowing &gt;= 1)
      {
         double adj_ave_soil_temp;
         double aflo_temp_fact = 0;
         adj_ave_soil_temp = ave_soil_temp[0];  // top layer.
         
         if (adj_ave_soil_temp &gt;= 22 &amp;&amp; adj_ave_soil_temp &lt;= 30)
         aflo_temp_fact = (adj_ave_soil_temp - 22) / (30 - 22);
         
         if (adj_ave_soil_temp &gt; 30 &amp;&amp; adj_ave_soil_temp &lt; 35)
         aflo_temp_fact = (35 - adj_ave_soil_temp) / (35 - 30);
         
         if (adj_ave_soil_temp &lt; 22)
         aflo_temp_fact = 0;
         
         if (adj_ave_soil_temp &gt; 35)
         aflo_temp_fact = 0;
          
         // Aflatoxin  rules for peanut with simulated temperature!!!!!! 
         aflo_perc = 0;
         if (Stage &gt;= 7)
         {
            double gddprop = ttafterstart_grain_fill / start_grain_fillTTTarget;
            double aflo = 0;
            if (gddprop &gt; 0.6 &amp;&amp; fasw &lt; 0.2)
               aflo = aflo + (1 * aflo_temp_fact);
            
            aflo_perc = aflo * 3;
            if (aflo_perc &gt; 100)
               aflo_perc = 100;
            
            if (aflo_perc &lt; 0)
               aflo_perc = 0;

            //aflo_conc = -45.369 + (2.9422 * aflo_perc);
            //if (aflo_conc &amp;lt; 0)
            //   aflo_conc = 0;
         }
      }
      
   }
      
  
   // ------------------------------------------------------------------------------
   // The following event handler will be called each day at the END of the day
   // ------------------------------------------------------------------------------
   [EventHandler] public void OnSowing()
   {
      if (WriteDepthFile)
         WriteDepthFileToDisk(); 
   }
  
   // ------------------------------------------------------------------------------
   // Calculate STAGE variables.
   // ------------------------------------------------------------------------------
   private void CalculateStageVariables()
   {
      if (DaysAfterSowing == 1)
      {
         Stage2Das = 0;
         Stage3Das = 0;
         Stage4Das = 0;
         Stage5Das = 0;
         Stage6Das = 0;
         Stage7Das = 0;
         Stage8Das = 0;
         Stage9Das = 0;
      }
      
      if (Stage &gt;= 2 &amp;&amp; Stage2Das == 0) 
         Stage2Das = DaysAfterSowing;
      else if (Stage &gt;= 3 &amp;&amp; Stage3Das == 0) 
         Stage3Das = DaysAfterSowing;
      else if (Stage &gt;= 4 &amp;&amp; Stage4Das == 0) 
         Stage4Das = DaysAfterSowing;
      else if (Stage &gt;= 5 &amp;&amp; Stage5Das == 0) 
         Stage5Das = DaysAfterSowing;
      else if (Stage &gt;= 6 &amp;&amp; Stage6Das == 0) 
         Stage6Das = DaysAfterSowing;
      else if (Stage &gt;= 7 &amp;&amp; Stage7Das == 0) 
         Stage7Das = DaysAfterSowing;
      else if (Stage &gt;= 8 &amp;&amp; Stage8Das == 0) 
         Stage8Das = DaysAfterSowing;
      else if (Stage &gt;= 9 &amp;&amp; Stage9Das == 0) 
         Stage9Das = DaysAfterSowing;
   }
  
   // ------------------------------------------------------------------------------
   // The following function will create a depth output file.
   // ------------------------------------------------------------------------------
   private void WriteDepthFileToDisk()
   {
      double[] cumThickness = Soil.ToCumThickness(dlayer);
      double[] ll = MathUtility.Divide(ll_dep, dlayer);
      
      StreamWriter writer = new StreamWriter(title + " Depth.out");
      
      writer.WriteLine("Depth AirDry     LL    DUL    SAT      SW     NO3     NH4");
      writer.WriteLine(" (mm)   (mm)   (mm)   (mm)   (mm)    (mm) (kg/ha) (kg/ha)");
      for (int i = 0; i &lt; dlayer.Length; i++)
      {
         writer.WriteLine("{0,5:F0}{1,7:F3}{2,7:F3}{3,7:F3}{4,7:F3}{5,7:F3}{6,8:F1}{7,8:F1}",
            new object[] {cumThickness[i], air_dry[i], ll[i], dul[i], sat[i], sw[i], no3[i], nh4[i]});
      }
      
      writer.Close();
   }
   
   // ------------------------------------------------------------------------------
   // The following function will update the gross margin.
   // ------------------------------------------------------------------------------
   private void GrossMargin()
   {
      // Keep track of the fertiliser applications.
      if (fertiliser &gt; 0)
         BankBalance -= FertiliserCost * fertiliser + FertiliserApplicationCost;

      // Keep track of the irrigation applications.
      if (irrig_tot &gt; 0)
         BankBalance -= WaterCost * (irrig_tot / 100);

      // Calculate gross margin at harvest.
      string stageName;
      string plantStatus;
      Paddock.Get(CropName + ".StageName", out stageName);
      Paddock.Get(CropName + ".plant_status", out plantStatus);
      if (stageName == "harvest_ripe" || plantStatus == "dead")
      {
         double FullPrice;
         if (grain_protein &gt; APH1Protein)
            FullPrice = APH1Price;
         else if (grain_protein &gt; APH2Protein)
            FullPrice = APH2Price;
         else if (grain_protein &gt; H2Protein)
            FullPrice = H2Price;
         else if(grain_protein &gt; APWProtein)
            FullPrice = APWPrice;
         else
            FullPrice = ASWPrice;
         
         BankBalance = BankBalance + FullPrice * WetYield;
      }
   }   
}
       </text>
        <Reference>ApsimFile.dll</Reference>
      </manager2>
      <manager name="WheatFrostHeat" enabled="no">
        <script>
          <text>
            frost_multiplier=1
            heat_multiplier=1
            frost_multiplier = 1
            cum_frost_multiplier=1
            cum_heat_multiplier=1

            heat_exposure= 0
            heat_stress_days = 0
            mild_heat_stress_days = 0
            mod_heat_stress_days = 0
            sev_heat_stress_days = 0

            mild_exposure = 0
            moderate_exposure = 0
            severe_exposure = 0



            mild_frost_days = 0
            mod_frost_days = 0
            sev_frost_days = 0
            frost_days = 0

            FrostHeatYield = 0
            FrostHeatYieldWet = 0
            MoistureContent = 12.0;
            wheat_in = 0



            ! This work comes from:
            !   Lindsay W. Bell, Julianne M. Lilley, James R. Hunt, and John A. Kirkegaard
            !     (2015) Optimising grain yield and grazing potential of crops across Australia’s
            !      high-rainfall zone: a simulation analysis. 1. Wheat, Crop &amp; Pasture Science, 66, 332-348.
          </text>
          <event>init</event>
        </script>
        <script>
          <text>
            if (stagename = 'out') then
              cum_frost_multiplier=1
              cum_heat_multiplier=1
              FrostHeatYield = 0
              wheat_in = 0
            else
              wheat_in = 1
              frost_multiplier = 1
              heat_multiplier = 1
              frost_days = 0
              mild_frost_days = 0
              mod_frost_days = 0
              sev_frost_days = 0
              heat_stress_days = 0
              mild_heat_stress_days = 0
              mod_heat_stress_days = 0
              sev_heat_stress_days = 0
            endif

            if (zadok_stage &gt; 60 and zadok_stage &lt; 79) then
              heat_exposure= 1
            else
              heat_exposure= 0
            endif

            if (heat_exposure = 1 AND maxt &gt;= 32 AND maxt &lt; 34) then
              heat_multiplier = 0.9
              mild_heat_stress_days = 1
            endif

            if (heat_exposure = 1 AND maxt &gt;= 34 AND maxt &lt; 36) then
              heat_multiplier = 0.8
              mod_heat_stress_days = 1
            endif

            if (heat_exposure = 1 AND maxt &gt;= 36) then
              heat_multiplier = 0.7
              sev_heat_stress_days = 1
            endif


            if (zadok_stage &gt; 60 and zadok_stage &lt; 69) then
              mild_exposure = 1
            else
              mild_exposure = 0
            endif

            if (zadok_stage &gt; 60 and zadok_stage &lt; 75) then
              moderate_exposure = 1
            else
              moderate_exposure = 0
            endif

            if (zadok_stage &gt; 60 and zadok_stage &lt; 79) then
              severe_exposure = 1
            else
              severe_exposure = 0
            endif

            if (mild_exposure = 1 AND mint &lt;= 2 AND mint &gt; 0) then
              frost_multiplier = 0.9
              mild_frost_days = 1
            endif

            if (moderate_exposure = 1 AND mint &lt;= 0 AND mint &gt; -2) then
              frost_multiplier = 0.8
              mod_frost_days = 1
            endif

            if (severe_exposure = 1 AND mint &lt;= -2) then
              frost_multiplier = 0.1
              sev_frost_days = 1
            endif

            frost_days = mild_frost_days + mod_frost_days + sev_frost_days
            heat_stress_days =  mild_heat_stress_days + mod_heat_stress_days + sev_heat_stress_days


            if (zadok_stage &gt; 60 and zadok_stage &lt; 79) then
            cum_frost_multiplier = cum_frost_multiplier * frost_multiplier
            cum_heat_multiplier = cum_heat_multiplier * heat_multiplier
            endif

            FrostHeatYield = Yield * cum_frost_multiplier * cum_heat_multiplier
            FrostHeatYieldWet = WetYield * cum_frost_multiplier * cum_heat_multiplier
          </text>
          <event>start_of_day</event>
        </script>
      </manager>
      <manager name="CanolaFrostHeat" enabled="no">
        <script>
          <text>
            frost_multiplier=1
            heat_multiplier=1
            frost_multiplier = 1
            cum_frost_multiplier=1
            cum_heat_multiplier=1
            heat_exposure= 0
            heat_stress_days = 0
            mild_heat_stress_days = 0
            mod_heat_stress_days = 0
            sev_heat_stress_days = 0

            frost_exposure = 0

            mild_frost_days = 0
            mod_frost_days = 0
            sev_frost_days = 0
            frost_days = 0

            FrostHeatYield = 0
            FrostHeatYieldWet = 0
            FrostHeatGrain_Wt = 0

            FrostHeatGrain_Wt3 = 0

            canola_in = 0


            ! This work comes from:
            !   Julianne M. Lilley, Lindsay W. Bell, and John A. Kirkegaard
            !     (2015) Optimising grain yield and grazing potential of crops across Australia’s
            !     high-rainfall zone: a simulation analysis. 2. Canola,
            !     Crop &amp; Pasture Science, 66, 349-364
          </text>
          <event>init</event>
        </script>
        <script>
          <text>
            !Rules for calculation of heat and frost risk

            degree_days = (mint + maxt) / 2
            if (canola.stage &gt;= 6) then
            cum_degree_days = degree_days + cum_degree_days
            else
            cum_degree_days = 0
            endif

            if (cum_degree_days &gt; 0 and cum_degree_days &lt; 630 then ! 630 degree days approx 6 weeks @ 15 dd / day; approx flowering window
            heat_exposure = 1
            else
            heat_exposure = 0
            endif

            if (cum_degree_days &gt; 140 and cum_degree_days &lt; 800) then ! 140 degree days approx 2 weeks @ 10 dd / day, to 6weeks after that
            ! approx water pod window
            frost_exposure = 1
            else
            frost_exposure = 0
            endif

            if (heat_exposure = 1 and maxt &gt;= 30) then
            heat_stress = 1
            else
            heat_stress = 0
            endif

            if (frost_exposure = 1 and mint &lt;= 2) then
            light_frost_stress = 1
            else
            light_frost_stress = 0
            endif

            if (frost_exposure = 1 and mint &lt;= 0) then
            heavy_frost_stress = 1
            else
            heavy_frost_stress = 0
            endif


            if (canola.stage &gt; 0) then  ! reset  each day
            canola_in = 1
            frost_multiplier = 1
            heat_multiplier = 1
            frost_days = 0
            mild_frost_days = 0
            mod_frost_days = 0
            sev_frost_days = 0
            heat_stress_days = 0
            mild_heat_stress_days = 0
            mod_heat_stress_days = 0
            sev_heat_stress_days = 0
            else
            canola_in = 0
            endif

            if (heat_exposure = 1 AND maxt &gt;= 30 AND maxt &lt; 33) then
            heat_multiplier = 0.9
            mild_heat_stress_days = 1
            endif

            if (heat_exposure = 1 AND maxt &gt;= 33 AND maxt &lt; 36) then
            heat_multiplier = 0.82
            mod_heat_stress_days = 1
            endif

            if (heat_exposure = 1 AND maxt &gt;= 36) then
            heat_multiplier = 0.65
            sev_heat_stress_days = 1
            endif



            if (frost_exposure = 1 AND mint &lt;= 2 AND mint &gt; 0) then
            frost_multiplier = 1.0
            mild_frost_days = 1
            endif

            if (frost_exposure = 1 AND mint &lt;= 0 AND mint &gt; -2) then
            frost_multiplier = 0.98
            mod_frost_days = 1
            endif

            if (frost_exposure = 1 AND mint &lt;= -2) then
            frost_multiplier = 0.90
            sev_frost_days = 1
            endif

            frost_days = mild_frost_days + mod_frost_days + sev_frost_days
            heat_stress_days =  mild_heat_stress_days + mod_heat_stress_days + sev_heat_stress_days

            if (canola.stagename = 'out') then
            cum_heat_stress = 0
            cum_light_frost_stress = 0
            cum_heavy_frost_stress = 0
            cum_frost_multiplier=1
            cum_heat_multiplier=1
            FrostHeatYield = 0
            FrostHeatYieldWet = 0
            FrostHeatGrain_wt = 0
            endif

            if (cum_degree_days &gt; 0 and cum_degree_days &lt; 630) then
            cum_heat_stress=cum_heat_stress + heat_stress
            cum_light_frost_stress=cum_light_frost_stress + light_frost_stress
            cum_heavy_frost_stress=cum_heavy_frost_stress + heavy_frost_stress
            cum_frost_multiplier=cum_frost_multiplier * frost_multiplier
            cum_heat_multiplier=cum_heat_multiplier * heat_multiplier
            endif

            if (canola.yield &gt; 0) then
            FrostHeatGrain_wt=canola.Grain_wt*cum_frost_multiplier*cum_heat_multiplier
            FrostHeatYield=canola.Yield*cum_frost_multiplier*cum_heat_multiplier / 1000
            FrostHeatYieldWet=canola.Yieldwet*cum_frost_multiplier*cum_heat_multiplier / 1000
            HIfh = FrostheatGrain_wt /  canola.biomass_wt
            HI = grain_wt / biomass_wt
            endif
          </text>
          <event>start_of_day</event>
        </script>
      </manager>
      <operations name="Operations" />
      <fertiliser name="Fertiliser" />
      <irrigation name="Irrigation">
        <automatic_irrigation type="list" listvalues="on,off" description="Automatic irrigation">off</automatic_irrigation>
        <asw_depth type="text" description="Depth to which ASW is calculated. (mm)">600.0</asw_depth>
        <crit_fr_asw type="text" description="Fraction of ASW below which irrigation is applied (0-1.0)">0.5</crit_fr_asw>
        <irrigation_efficiency description="Efficiency of the irrigation. (0-1.0)">1.0</irrigation_efficiency>
        <default_no3_conc type="text" description="Nitrate concentration (ppm N)">0.0</default_no3_conc>
        <default_nh4_conc type="text" description="Ammonium concentration (ppm N)">0.0</default_nh4_conc>
        <default_cl_conc type="text" description="Chloride concentration (ppm Cl)">0.0</default_cl_conc>
      </irrigation>
      <surfaceom name="SurfaceOM">
        <PoolName type="text" description="Organic Matter pool name">wheat</PoolName>
        <type type="list" listvalues="inert,manure,fym,bambatsi,barley,broccoli,camaldulensis,canola,chickpea,cowpea,danthonia,globulus,grandis,fababean,fieldpea,grass,lablab,lucerne,lupin,maize,millet,mucuna,mungbean,horsegram,navybean,cotton,orobanche,peanut,pigeonpea,rice,soybean,sorghum,stylo,sugar,sunflower,sweetcorn,sweetsorghum,weed,wheat" description="Organic Matter type">wheat</type>
        <mass type="text" description="Initial surface residue (kg/ha)">1000</mass>
        <cnr type="text" description="C:N ratio of initial residue">80</cnr>
        <standing_fraction type="text" description="Fraction of residue standing">0</standing_fraction>
      </surfaceom>
      <erosion name="Erosion">
        <model description="Model Name">freebairn</model>
        <slope description="Slope of plot in percent (%)">6.5</slope>
        <slope_length description="Length of plot (m)">60.0</slope_length>
        <k_factor description="Soil erodibility factor (t/ha/EI 30 )">0.4</k_factor>
        <p_factor description="Supporting practise factor (unitless)">1.0</p_factor>
        <bed_depth description="Depth to bedrock (mm)">4000</bed_depth>
        <profile_reduction type="list" listvalues="off,on" description="Profile Reduction">off</profile_reduction>
        <profile_layer_merge description="Fraction of original size in which the lowest layer is merged into the layer above (0-1)">0.05</profile_layer_merge>
        <minimum_depth description="If the profile erodes to this depth, the simulation is stopped (mm)">100.0</minimum_depth>
      </erosion>
      <tracker name="Tracker">
        <variable>sum of rain on start_of_day as AccumRain</variable>
        <variable>sum of unpatched_rain on start_of_day from ThisMonth to ThreeMonthsTime as RainInComingMonths</variable>
        <variable>value of HayBiomass on flowering as Hay</variable>
        <variable>sum of runoff on end_of_day from CurrentDay to sowing as SumRunoffToSowing</variable>
        <variable>sum of soil_loss on end_of_day  from CurrentDay to sowing as SumSoilLossToSowing</variable>
        <variable>value of AvailableWater on sowing as AvailableWaterAtSowing</variable>
        <variable>value of Nitrogen on sowing as NitrogenAtSowing</variable>
        <variable>sum of rain on end_of_day from sowing to harvesting as InCropRain</variable>
        <variable>sum of irrigation on end_of_day from sowing to harvesting as InCropIrrigation</variable>
        <variable>sum of fertiliser on end_of_day from emergence to harvesting as TopDressFertiliser</variable>
        <variable>sum of fertiliser on end_of_day from sowing to emergence as SowingFertiliser</variable>
        <variable>sum of fertiliser on end_of_day from start_simulation to sowing as PreSowingFertiliser</variable>
        <variable>sum of rain on end_of_day from GSRStart to GSREnd as GSR</variable>
        <variable>sum of n_stress_expan on end_of_day from sowing to harvesting as CumNStressExpan</variable>
        <variable>sum of n_stress_photo on end_of_day from sowing to harvesting as CumNStressPhoto</variable>
        <variable>sum of NUptakeKgHa on end_of_day from sowing to harvesting as TotalNUptake</variable>
        <variable>sum of es on end_of_day from sowing to harvesting as TotalES</variable>
        <variable>sum of ep on end_of_day from sowing to harvesting as TotalEP</variable>
        <variable>sum of rain on end_of_day from startofyear to endofyear as AnnualRain</variable>
        <variable>count of WaterLog1OrMore from sowing to harvesting as NumWaterLoggingEventsFor1OrMoreDays</variable>
        <variable>count of WaterLog2OrMore from sowing to harvesting as NumWaterLoggingEventsFor2OrMoreDays</variable>
        <variable>count of WaterLog3OrMore from sowing to harvesting as NumWaterLoggingEventsFor3OrMoreDays</variable>
        <variable>count of WaterLog4OrMore from sowing to harvesting as NumWaterLoggingEventsFor4OrMoreDays</variable>
        <variable>count of WaterLog5OrMore from sowing to harvesting as NumWaterLoggingEventsFor5OrMoreDays</variable>
        <variable>count of WaterLog6OrMore from sowing to harvesting as NumWaterLoggingEventsFor6OrMoreDays</variable>
        <variable>sum of Mineralisation on end_of_day from sowing to harvesting as InCropMineralisation</variable>
        <variable>sum of NitrogenTieUp on end_of_day from sowing to harvesting as InCropNitrogenTieUp</variable>
        <variable>sum of dnit() on end_of_day from sowing to harvesting as InCropNitrification</variable>
        <variable>sum of leach_no3 on end_of_day from sowing to harvesting as InCropNLeaching</variable>
        <variable>sum of sw_stress_expan on end_of_day from sowing to harvesting as CumSWStressExpan</variable>
        <variable>sum of sw_stress_photo on end_of_day from sowing to harvesting as CumSWStressPhoto</variable>
        <variable>sum of sw_stress_photo on end_of_day from sowing to floral_initiation as CumSWStressPhotoSowToFI</variable>
        <variable>sum of sw_stress_photo on end_of_day from floral_initiation to flowering as CumSWStressPhotoFIToFlowering</variable>
        <variable>sum of sw_stress_photo on end_of_day from flowering to harvesting as CumSWStressPhotoFloweringToHarvesting</variable>
        <variable>sum of n_stress_photo on end_of_day from sowing to floral_initiation as CumNStressPhotoSowToFI</variable>
        <variable>sum of n_stress_photo on end_of_day from floral_initiation to flowering as CumNStressPhotoFIToFlowering</variable>
        <variable>sum of n_stress_photo on end_of_day from flowering to harvesting as CumNStressPhotoFloweringToHarvesting</variable>
        <variable>sum of rain on end_of_day from CurrentDay to harvesting as RainToMaturity</variable>
        <variable>sum of Mineralisation on end_of_day from CurrentDay to harvesting as MineralisationToMaturity</variable>
        <variable>sum of NitrogenTieUp on end_of_day from CurrentDay to harvesting as NitrogenTieUpToMaturity</variable>
        <variable>sum of runoff on end_of_day from start_simulation to end_simulation as TotalRunoff</variable>
        <variable>sum of drain on end_of_day from start_simulation to end_simulation as TotalDrainage</variable>
        <variable>sum of leach_no3 on end_of_day from start_simulation to end_simulation as TotalNo3Leaching</variable>
        <variable>sum of n2o_atm() on end_of_day from start_simulation to end_simulation as TotalN2O</variable>
        <variable>average of ep on last 3 end_of_day from sowing to harvesting as WeeklyEP</variable>
      </tracker>
      <outputfile name="Yearly" enabled="no">
        <filename output="yes">Base Yearly.out</filename>
        <title>Base Yearly</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>SowDate format dd/mm/yyyy</variable>
          <variable>DaysAfterSowing</variable>
          <variable>flowering_das</variable>
          <variable>biomass</variable>
          <variable>wetyield</variable>
          <variable>Grain_protein</variable>
          <variable>grain_n</variable>
          <variable>grain_no</variable>
          <variable>oil_conc</variable>
          <variable>Hay</variable>
          <variable>Zadok11Das</variable>
          <variable>Zadok12Das</variable>
          <variable>Zadok13Das</variable>
          <variable>Zadok14Das</variable>
          <variable>Zadok15Das</variable>
          <variable>Zadok16Das</variable>
          <variable>Zadok30Das</variable>
          <variable>Zadok31Das</variable>
          <variable>Zadok32Das</variable>
          <variable>Zadok37Das</variable>
          <variable>Zadok39Das</variable>
          <variable>Zadok45Das</variable>
          <variable>Zadok55Das</variable>
          <variable>Zadok65Das</variable>
          <variable>Zadok75Das</variable>
          <variable>root_depth</variable>
          <variable>MildFrostCount</variable>
          <variable>ModerateFrostCount</variable>
          <variable>SevereFrostCount</variable>
          <variable>MildHeatShockCount</variable>
          <variable>ModerateHeatShockCount</variable>
          <variable>SevereHeatShockCount</variable>
          <variable>MildFrostAdditiveCount</variable>
          <variable>ModerateFrostAdditiveCount</variable>
          <variable>MildHeatShockAdditiveCount</variable>
          <variable>ModerateHeatShockAdditiveCount</variable>
          <variable>AmountWaterAboveCLL</variable>
          <variable>NumWaterLoggingEventsFor1OrMoreDays</variable>
          <variable>NumWaterLoggingEventsFor2OrMoreDays</variable>
          <variable>NumWaterLoggingEventsFor3OrMoreDays</variable>
          <variable>NumWaterLoggingEventsFor4OrMoreDays</variable>
          <variable>NumWaterLoggingEventsFor5OrMoreDays</variable>
          <variable>NumWaterLoggingEventsFor6OrMoreDays</variable>
          <variable>MineralisationToMaturity</variable>
          <variable>NitrogenTieUpToMaturity</variable>
          <variable>BankBalance</variable>
          <variable>TotalRunoff</variable>
          <variable>TotalDrainage</variable>
          <variable>TotalNO3Leaching</variable>
          <variable>TotalN2O</variable>
          <variable>ChangeInOrganicC</variable>
          <variable>AvailableWaterAtSowing</variable>
          <variable>AvailableWater as AvailableWaterAtHarvest</variable>
          <variable>InCropRain</variable>
          <variable>InCropIrrigation</variable>
          <variable>NitrogenAtSowing</variable>
          <variable>Nitrogen as NitrogenAtHarvest</variable>
          <variable>PreSowingFertiliser</variable>
          <variable>SowingFertiliser</variable>
          <variable>TopDressFertiliser</variable>
          <variable>PeanutPodYield</variable>
          <variable>Stage</variable>
          <variable>Stage2Das</variable>
          <variable>Stage3Das</variable>
          <variable>Stage4Das</variable>
          <variable>Stage5Das</variable>
          <variable>Stage6Das</variable>
          <variable>Stage7Das</variable>
          <variable>Stage8Das</variable>
          <variable>Stage9Das</variable>
          <variable>FrostHeatYieldWet</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>harvesting</event>
        </events>
      </outputfile>
      <outputfile name="Monthly" enabled="no">
        <filename output="yes">Base Monthly.out</filename>
        <title>Base Monthly</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>AccumRain</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>start_month</event>
        </events>
      </outputfile>
      <outputfile name="Daily" enabled="no">
        <filename output="yes">Base Daily.out</filename>
        <title>Base Daily</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>AccumRain</variable>
          <variable>Biomass</variable>
          <variable>Z</variable>
          <variable>Zero</variable>
          <variable>MildFrostCount</variable>
          <variable>ModerateFrostCount</variable>
          <variable>SevereFrostCount</variable>
          <variable>MildHeatShockCount</variable>
          <variable>ModerateHeatShockCount</variable>
          <variable>SevereHeatShockCount</variable>
          <variable>root_depth</variable>
          <variable>AmountWaterAboveCLL</variable>
          <variable>AvailableWater</variable>
          <variable>PAWC</variable>
          <variable>Rain</variable>
          <variable>irrig_tot</variable>
          <variable>Irrigation</variable>
          <variable>es</variable>
          <variable>ep</variable>
          <variable>drain</variable>
          <variable>runoff</variable>
          <variable>Nitrogen</variable>
          <variable>Mineralisation</variable>
          <variable>fertiliser</variable>
          <variable>NInPlant</variable>
          <variable>dnit()</variable>
          <variable>leach_no3</variable>
          <variable>NO3AvailToRoots</variable>
          <variable>NitrogenTieUp</variable>
          <variable>CLLToday</variable>
          <variable>DULToday</variable>
          <variable>SWToday</variable>
          <variable>CritSWToday</variable>
          <variable>sw_stress_expan</variable>
          <variable>n_stress_expan</variable>
          <variable>NUptakeKgHa</variable>
          <variable>AmountWaterLeft</variable>
          <variable>BankBalance</variable>
          <variable>DaysAfterSowing</variable>
          <variable>PeanutPodYield</variable>
          <variable>aflo_perc</variable>
          <variable>TTAfterSowing</variable>
          <variable>Stage</variable>
          <variable>watersupply</variable>
          <variable>TAW</variable>
          <variable>RAW</variable>
          <variable>FCW</variable>
          <variable>WeeklyEP</variable>
          <variable>NextIrrig</variable>
          <variable>PercentCover</variable>
          <variable>FASW</variable>
          <variable>ave_soil_temp(1) as SoilTemp</variable>
          <variable>sw</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>post</event>
        </events>
      </outputfile>
      <outputfile name="Next10Days" enabled="no">
        <filename output="yes">Base Next10Days.out</filename>
        <title>Base Next10Days</title>
        <variables name="Variables">
          <variable>dd/mm/yyyy as Date</variable>
          <variable>Z</variable>
          <variable>AmountWaterAboveCLL</variable>
          <variable>AvailableWater</variable>
          <variable>Mineralisation</variable>
          <variable>NInPlant</variable>
          <variable>NO3AvailToRoots</variable>
          <variable>NitrogenTieUp</variable>
          <variable>SWToday</variable>
          <variable>CritSWToday</variable>
        </variables>
        <events name="Reporting Frequency">
          <event>InTenDayWindow</event>
        </events>
      </outputfile>
    </area>
  </simulation>
</folder>